{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","console","log","setTimeout","books","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAoCeA,MAhCf,YAAwD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC1C,OAAO,yBAAKC,UAAU,SAClB,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,cACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACND,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAiB,wBAAKC,IAAKD,EAAOL,UAAY,iBAA7B,IACxBI,OAGZ,wBAAIJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAE,KAAhD,UCqEGC,G,kNA9EXC,MAAQ,CACJC,WAAW,EACXC,OAAQ,I,EAEZC,U,sBAAY,8BAAAC,EAAA,sEAQEC,IAAMC,IAAI,4DARZ,gBAKIJ,EALJ,EAGJK,KACIA,KACIL,OAKZ,EAAKM,SAAS,CAACN,WAEfO,QAAQC,IAAIR,GAZJ,2C,kEAeS,IAAD,OAChBS,YAAW,WACP,EAAKH,SAAS,CAACP,WAAW,EAAOW,OAAO,MAEzC,KAUHC,KAAKV,c,+BAEA,MAWuBU,KAAKb,MAA1BC,EAXF,EAWEA,UAAWC,EAXb,EAWaA,OAClB,OAAO,6BAASX,UAAU,aAClBU,EACM,yBAAKV,UAAU,UACT,0BAAMA,UAAU,gBAAhB,eAGJ,yBAAKA,UAAU,UAEPW,EAAOR,KAAI,SAAAoB,GAAK,OACZ,kBAAC,EAAD,CACIjB,IAAKiB,EAAMC,GACXA,GAAID,EAAMC,GACV7B,KAAM4B,EAAM5B,KACZC,MAAO2B,EAAM3B,MACbC,QAAS0B,EAAM1B,QACfC,OAAQyB,EAAME,mBACd1B,OAAQwB,EAAMxB,kB,GAhEpC2B,IAAMC,YCDxBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eACL,a","file":"static/js/main.4ea49cde.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({year, title, summary, poster, genres}) {\r\n    return <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title}/>\r\n        <div className=\"movie_data\">\r\n            <h3 className=\"movie__title\">{title}</h3>\r\n            <h5 className=\"movie__year\">{year}</h5>\r\n            <ul className=\"genres\">{\r\n                    genres.map((genre, index) =>< li key={index} className = \"genres__genre\" > {\r\n                        genre\r\n                    }</li>)\r\n                }</ul>\r\n            <h4 className=\"movie__summary\">{summary.slice(0,180)}...</h4>\r\n            \r\n        </div>\r\n\r\n    </div>\r\n}\r\n// movie component 는 따로 state가 필요하지 않으므로 function component로 변경 우리가 얻어올 prop을\r\n// 알아보는것. <h3 class=\"movie__title\">{title}</h3> 에 직접적으로 style을 넣고 싶으면 <h3\r\n// class=\"movie__title\" style={{backgroundColor:\"red\"}}>{title}</h3> 이런 방식으로 가능은\r\n// 하나 추천하지 않는 방법.\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired, //프록시로 얻어온 json 데이터 내에 id 값.\r\n    year: PropTypes.number.isRequired, //해당 데이터의 year값 이하 동일.\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes\r\n        .arrayOf(PropTypes.string)\r\n        .isRequired\r\n};\r\nexport default Movie;\r\n","import React from 'react';\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n//3.2 component life cycle 행의 질문 다시 살펴볼 것\nclass App extends React.Component {\n    state = {\n        isLoading: true,\n        movies: []\n    }\n    getMovies = async () => { //아래의 비동기식 처리말고 더 좋은 방법. ES6 기준. async\n        // const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\"); axios가 항상 빠르지 않음. 약간 기다려야 함.//ES6 기준 async없으면 await 못씀.\n        const {\n            data: {\n                data: {\n                    movies\n                }\n            }\n        } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"); //axios가 항상 빠르지 않음. 약간 기다려야 함.//ES6 기준 async없으면 await 못씀.\n        // this.setState({movies:movies});//1:은 state, 2:는 axios\n        this.setState({movies}); //javascript가 알아서 잘 판단할 수 있다.\n        // console.log(movies.data.data.movies);\n        console.log(movies);\n    }\n    // async componentDidMount() {axios} axios가 빠르지 않을 경우.\n    componentDidMount() { //render 호출시 호출되는 함수)\n        setTimeout(() => {\n            this.setState({isLoading: false, books: true}); //위에 books가 설정되지 않았는데 이러면 오류가 없나?\n            //   오류 없음 위의 state는 단순히 계획이지 여기서 추가적으로 들어오는 것에 대해서는 막지 않음. 지정 시에 undefined일 가능성이 있을 뿐. 다만 이렇게 하는 것보다 미리 state에 넣는 것이 좋다.\n        }, 6000);\n        // 마운팅하는 동안 데이터를 가져와서 fetch하는 것. 데이터를 보통은 fetch를 쓰지만 여기서는 axios를 씀. 이게 더 좋다고 함.\n        // npm i axios 불법적인 영화 공유사이트인데 API를 잘짜서 이쪽 API를 사용함.\n        // https://yts.lt/api/v2/list_movies.json 다만 불법적이라서 주소가 자주 변경되므로 이를 proxy함.\n        // https://yts-proxy.now.sh/list_movies.json endpoint 는 URL 을 의미 const { data }\n        // = await axios.get() vs const response = await fetch.get() const data = await\n        // response.json() 기본적으로는 이렇게 쓰인다. await 나 then 이나 둘 다 비동기적으로 한다는 뜻.\n        // fetch('http://hanur.me/users').then(res => res.json()).then(data =>\n        // data.filter(item => item.isRequired));\n        //\n        this.getMovies();\n    }\n    render() {\n        // return <div>{isLoading ? \"Loading\":\"We are ready\"}</div>;//이전 기준 const\n        // {isLoading} = this.state; ES6 기준\n        /*A :        const { isLoading } = this.state;\n\n      B :        const isLoading = this.state.isLoading;\n\n    is A same B ??\n    A is new~ es6 ?? oh my god\n    ->search 비구조화할당\n */\n        const {isLoading, movies} = this.state;\n        return <section className=\"container\">{\n                isLoading\n                    ? <div className=\"loader\">\n                            <span className=\"loader__text\">Loading...</span>\n                        </div>\n                    : (\n                        <div className=\"movies\">\n                            {\n                                movies.map(movie => (\n                                    <Movie\n                                        key={movie.id}\n                                        id={movie.id}\n                                        year={movie.year}\n                                        title={movie.title}\n                                        summary={movie.summary}\n                                        poster={movie.medium_cover_image}\n                                        genres={movie.genres}\n                                        />\n                                ))\n                            }\n                        </div>\n                    )\n            }</section>;\n        // React requires elements generated on a loop to have a 'key' prop. Remove it\n        // and see what happens. Key가 필요할 뿐. return <div>{isLoading ? \"Loading...\":\"We\n        // are ready\"}</div>;\n        //여기서 div 뭐 이런것처럼 전부 HTML처럼 보이는데 이게 전부 JSX다. HTML이 아니다. 여기 내부는 Javascript이기 때문.\n        //따라서 html의 class 같이 쓰려면 className이라고 써야한다. 비슷한 예로 label 내에 for이 있는데 이때는 htmlFor이라고 써야한다.\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\n        'potato'\n    )\n);/*  렌더링은 어플리케이션당 하나밖에 안됨. 다만 App 내에 Potato를 import 하고, 이를 App.js 에서 Potato를 가져오면\n * 서 가능하다.\nComponents is just a function that returns HTML.\n다만 예상대로 <app /> <Pot\n * ato /> 처럼 렌더링하는 것도 가능은 한데, potato하나에 묶기는 힘들 상황이다.\n심지어 ReactDom.render를 두개 써서 \n * 하는 것도 가능하다.\nReactDOM.render renders your application on HTML. Your applicatio\n * n is a group of many many components.\n즉 지금이야 방금 위처럼 두개를 동시에 렌더링이 가능하지만, 복잡도가 \n * 증가하면 저 두개를 어떻게 배치해야하는지 등등을\n따져야하므로 실제적으로는 그런 복잡도와 배치문제로 한개만 렌더링하도록 만드는 것이 좋다.\n\n * \n\n */"],"sourceRoot":""}