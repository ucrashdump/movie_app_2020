{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["About","props","console","log","Movie","id","year","title","summary","poster","genres","to","pathname","state","className","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","books","movie","medium_cover_image","React","Component","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAOeA,MALf,SAAeC,GAEX,OADAC,QAAQC,IAAIF,GACL,qF,gFCyDIG,MAxDf,YAOI,IANAC,EAMD,EANCA,GACAC,EAKD,EALCA,KACAC,EAID,EAJCA,MACAC,EAGD,EAHCA,QACAC,EAED,EAFCA,OAED,IADCC,cACD,MADU,CAAC,QACX,EACC,OAAO,kBAAC,IAAD,CACHC,GAAI,CAEAC,SAAS,UAAD,OAAYP,GAGpBQ,MAAO,CACHP,OACAC,QACAC,UACAC,SACAC,YAIR,yBAAKI,UAAU,SACX,yBAAKC,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,yBAAKO,UAAU,cACX,wBAAIA,UAAU,gBAAgBP,GAC9B,wBAAIO,UAAU,eAAeR,GAC7B,wBAAIQ,UAAU,iBACNJ,EAAOO,KAAI,SAACC,EAAOC,GAAR,OAAiB,wBAAKC,IAC7BD,EAEJL,UAAY,iBAHgB,IAIxBI,OAGZ,wBAAIJ,UAAU,kBAAkBN,EAAQa,MAAM,EAAG,KAAjD,WC4CDC,G,kNA/EXT,MAAQ,CACJU,WAAW,EACXC,OAAQ,I,EAEZC,U,sBAAY,8BAAAC,EAAA,sEAQEC,IAAMC,IAAI,4DARZ,gBAKIJ,EALJ,EAGJK,KACIA,KACIL,OAKZ,EAAKM,SAAS,CAACN,WAEftB,QAAQC,IAAIqB,GAZJ,2C,kEA6BRO,KAAKN,YACLM,KAAKD,SAAS,CAACP,WAAW,EAAOS,OAAO,M,+BAEnC,MAWuBD,KAAKlB,MAA1BU,EAXF,EAWEA,UAAWC,EAXb,EAWaA,OAClB,OAAO,6BAASV,UAAU,aAClBS,EACM,yBAAKT,UAAU,UACT,0BAAMA,UAAU,gBAAhB,eAGJ,yBAAKA,UAAU,UAEPU,EAAOP,KAAI,SAAAgB,GAAK,OACZ,kBAAC,EAAD,CACIb,IAAKa,EAAM5B,GACXA,GAAI4B,EAAM5B,GACVC,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAMC,mBACdxB,OAAQuB,EAAMvB,kB,GAjEnCyB,IAAMC,YCyBVC,E,kLAxBPnC,QAAQC,IAAI4B,KAAK9B,OADD,MAEY8B,KAAK9B,MAA1BqC,EAFS,EAETA,SAAUC,EAFD,EAECA,QACjBrC,QAAQC,IAAImC,EAASzB,YACC2B,IAAnBF,EAASzB,OACR0B,EAAQE,KAAK,O,+BAGZ,IACEH,EAAYP,KAAK9B,MAAjBqC,SAEP,OAAO,8BAAOA,EAASzB,MAAMN,W,GAbhB4B,IAAMC,WCQZM,MARf,WACI,OAAO,6BAEH,kBAAC,IAAD,CAAM/B,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCWOgC,MAVf,WACE,OAAO,kBAAC,IAAD,KACF,kBAAC,EAAD,MACH,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWxB,IACxC,kBAAC,IAAD,CAAOsB,KAAK,SAASC,OAAO,EAAMC,UAAW9C,IAC7C,kBAAC,IAAD,CAAO4C,KAAK,aAAaE,UAAWT,MCTxCU,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eACL,a","file":"static/js/main.96d367d3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction About(props){\r\n    console.log(props);//histroy, location, match, staticContext 모든 라우터는 기본적으로 이 네개의 props를 갖는다.\r\n    return <span>About this page: I built it because I love movies.</span>;\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\"\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({\r\n    id,\r\n    year,\r\n    title,\r\n    summary,\r\n    poster,\r\n    genres = ['nope']\r\n}) {\r\n    return <Link\r\n        to={{\r\n            // pathname: \"/movie-detail\",\r\n            pathname: `/movie/${id}`,\r\n            //state를 저장해야하므로 페이지를 보일때마다 해당 데이터를 로드해야한다.\r\n            //따라서 이 부분은 redux를 통해서 해결해야한다. \r\n            state: {\r\n                year,\r\n                title,\r\n                summary,\r\n                poster,\r\n                genres\r\n\r\n            }\r\n        }}>\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}/>\r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">{\r\n                        genres.map((genre, index) =>< li key = {\r\n                            index\r\n                        }\r\n                        className = \"genres__genre\" > {\r\n                            genre\r\n                        }</li>)\r\n                    }</ul>\r\n                <h4 className=\"movie__summary\">{summary.slice(0, 180)}...</h4>\r\n            </div>\r\n        </div>\r\n    </Link>\r\n}\r\n// movie component 는 따로 state가 필요하지 않으므로 function component로 변경 우리가 얻어올 prop을\r\n// 알아보는것. <h3 class=\"movie__title\">{title}</h3> 에 직접적으로 style을 넣고 싶으면 <h3\r\n// class=\"movie__title\" style={{backgroundColor:\"red\"}}>{title}</h3> 이런 방식으로 가능은\r\n// 하나 추천하지 않는 방법.\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired, //프록시로 얻어온 json 데이터 내에 id 값.\r\n    year: PropTypes.number.isRequired, //해당 데이터의 year값 이하 동일.\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes\r\n        .arrayOf(PropTypes.string)\r\n        .isRequired\r\n};\r\nexport default Movie;\r\n","import React from 'react';\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n//3.2 component life cycle 행의 질문 다시 살펴볼 것\r\nclass Home extends React.Component {\r\n    state = {\r\n        isLoading: true,\r\n        movies: []\r\n    }//state 를 쓰기 위해서 굳이 class compenent를 쓸 필요는 없다 다만 새로운 거 react hook 가 나와서 그렇다. 그러나 그렇다고 class component가 과거라는 것이 아니다.\r\n    getMovies = async () => { //아래의 비동기식 처리말고 더 좋은 방법. ES6 기준. async\r\n        // const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\"); axios가 항상 빠르지 않음. 약간 기다려야 함.//ES6 기준 async없으면 await 못씀.\r\n        const {\r\n            data: {\r\n                data: {\r\n                    movies\r\n                }\r\n            }\r\n        } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"); //axios가 항상 빠르지 않음. 약간 기다려야 함.//ES6 기준 async없으면 await 못씀.\r\n        // this.setState({movies:movies});//1:은 state, 2:는 axios\r\n        this.setState({movies}); //javascript가 알아서 잘 판단할 수 있다.\r\n        // console.log(movies.data.data.movies);\r\n        console.log(movies);\r\n    }\r\n    // async componentDidMount() {axios} axios가 빠르지 않을 경우.\r\n    componentDidMount() { //render 호출시 호출되는 함수)\r\n        // setTimeout(() => {\r\n             //위에 books가 설정되지 않았는데 이러면 오류가 없나?\r\n            //   오류 없음 위의 state는 단순히 계획이지 여기서 추가적으로 들어오는 것에 대해서는 막지 않음. 지정 시에 undefined일 가능성이 있을 뿐. 다만 이렇게 하는 것보다 미리 state에 넣는 것이 좋다.\r\n        // }, 6000);\r\n        // 마운팅하는 동안 데이터를 가져와서 fetch하는 것. 데이터를 보통은 fetch를 쓰지만 여기서는 axios를 씀. 이게 더 좋다고 함.\r\n        // npm i axios 불법적인 영화 공유사이트인데 API를 잘짜서 이쪽 API를 사용함.\r\n        // https://yts.lt/api/v2/list_movies.json 다만 불법적이라서 주소가 자주 변경되므로 이를 proxy함.\r\n        // https://yts-proxy.now.sh/list_movies.json endpoint 는 URL 을 의미 const { data }\r\n        // = await axios.get() vs const response = await fetch.get() const data = await\r\n        // response.json() 기본적으로는 이렇게 쓰인다. await 나 then 이나 둘 다 비동기적으로 한다는 뜻.\r\n        // fetch('http://hanur.me/users').then(res => res.json()).then(data =>\r\n        // data.filter(item => item.isRequired));\r\n        //\r\n        this.getMovies();\r\n        this.setState({isLoading: false, books: true});\r\n    }\r\n    render() {\r\n        // return <div>{isLoading ? \"Loading\":\"We are ready\"}</div>;//이전 기준 const\r\n        // {isLoading} = this.state; ES6 기준\r\n        /*A :        const { isLoading } = this.state;\r\n\r\n      B :        const isLoading = this.state.isLoading;\r\n\r\n    is A same B ??\r\n    A is new~ es6 ?? oh my god\r\n    ->search 비구조화할당\r\n */\r\n        const {isLoading, movies} = this.state;\r\n        return <section className=\"container\">{\r\n                isLoading\r\n                    ? <div className=\"loader\">\r\n                            <span className=\"loader__text\">Loading...</span>\r\n                        </div>\r\n                    : (\r\n                        <div className=\"movies\">\r\n                            {\r\n                                movies.map(movie => (\r\n                                    <Movie\r\n                                        key={movie.id}\r\n                                        id={movie.id}\r\n                                        year={movie.year}\r\n                                        title={movie.title}\r\n                                        summary={movie.summary}\r\n                                        poster={movie.medium_cover_image}\r\n                                        genres={movie.genres}\r\n                                        />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n            }</section>;\r\n        // React requires elements generated on a loop to have a 'key' prop. Remove it\r\n        // and see what happens. Key가 필요할 뿐. return <div>{isLoading ? \"Loading...\":\"We\r\n        // are ready\"}</div>;\r\n        //여기서 div 뭐 이런것처럼 전부 HTML처럼 보이는데 이게 전부 JSX다. HTML이 아니다. 여기 내부는 Javascript이기 때문.\r\n        //따라서 html의 class 같이 쓰려면 className이라고 써야한다. 비슷한 예로 label 내에 for이 있는데 이때는 htmlFor이라고 써야한다.\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\n\r\nclass Detail extends React.Component{\r\n    //참고로 componentDidMount 없이 렌더에서 다 처리할 수도 있다.\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n        const {location, history} = this.props;\r\n        console.log(location.state);\r\n        if(location.state === undefined){\r\n            history.push(\"/\");// state가 없으면 홈으로 보냄.\r\n        }\r\n    }\r\n    render(){\r\n        const {location} = this.props;\r\n        \r\n        return <span>{location.state.title}</span>;\r\n        // 다만 이렇게 하면 location.state에 정보가 없으면 오류가 난다.(단순 새로고침시)\r\n        // 두가지 방법 2번은 :id 같은 걸로 처리 \r\n        // https://reacttraining.com/react-router/web/api/Redirect 참고\r\n    }\r\n}\r\n/*\r\n1번\r\nif(location.state){\r\n            return <span>{location.state.title}</span>\r\n        }else{\r\n            return null;\r\n        } */\r\n\r\nexport default Detail;","import React from 'react';\r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Navigation(){\r\n    return <div>\r\n        {/* <a href=\"/\">Home</a>이렇게 하면 직접 웹페이지 이동으로 새로고침 하게 된다. */}\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/about\">About</Link>\r\n    </div>\r\n}\r\n//<Link to={{pathname:\"/about\",state:{fromNavigation:true}}}>About</Link>fromNavigation은 임의의 값 으로 이 또한 전달해준다.\r\nexport default Navigation;\r\n","import React from 'react';\nimport {HashRouter, Route} from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\n\nimport Navigation from \"./components/Navigation\"\n\nfunction App(){\n  return <HashRouter> \n       <Navigation/>\n    <Route path=\"/\" exact={true} component={Home}/>\n    <Route path=\"/about\" exact={true} component={About}/>\n    <Route path=\"/movie/:id\" component={Detail}/>\n  </HashRouter>;\n}\n//<Route path=\"/movie-detail\" component={Detail}/>\n//\nexport default App;\n/* \n\n  // <HashRouter> \n  <BrowserRouter> #/같은 표시는 없어지는 대신에 github 페이지와 연동이 쉽지 않음.\n  <Navigation/>만약 navigation이 Link를 쓰고 있으면 반드시 HashRouter나 BrowserRouter 안에 써야한다. (기능이 지원해야 하므로.)\n  <footer>같은 것은 Router가 필요하지 않으므로 굳이 Router 안에 쓸 필요 없다.\n  <Route path =\"/\" component={Home}/> 이렇게 하면 홈하고 about이 겹쳐서 나온다. \n  <Route path=\"/about\" component={About}/>\n  <Route path=\"/home\" exact={true} component={Home}>이렇게 하면 나오지는 않으나,  /를 쓸 수 없고  exact 를 쓰면 된다.\n  <Route path=\"/\" exact={true} component={Home}>\n    <h1>Home</h1>\n  </Route>\n  <Route path=\"/home/introduction\" exact={true} component={Home}> 여기 부위하고도 겹쳐서 나오게 된다.\n    <h1>Introduction</h1>\n  </Route>\n  <Route path=\"/about\" exact={true} component={About}>\n\n  </Route>\n  </BrowserRouter>\n// </HashRouter>\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\n        'potato'\n    )\n);/*  렌더링은 어플리케이션당 하나밖에 안됨. 다만 App 내에 Potato를 import 하고, 이를 App.js 에서 Potato를 가져오면\n * 서 가능하다.\nComponents is just a function that returns HTML.\n다만 예상대로 <app /> <Pot\n * ato /> 처럼 렌더링하는 것도 가능은 한데, potato하나에 묶기는 힘들 상황이다.\n심지어 ReactDom.render를 두개 써서 \n * 하는 것도 가능하다.\nReactDOM.render renders your application on HTML. Your applicatio\n * n is a group of many many components.\n즉 지금이야 방금 위처럼 두개를 동시에 렌더링이 가능하지만, 복잡도가 \n * 증가하면 저 두개를 어떻게 배치해야하는지 등등을\n따져야하므로 실제적으로는 그런 복잡도와 배치문제로 한개만 렌더링하도록 만드는 것이 좋다.\n\n * \n\n */"],"sourceRoot":""}